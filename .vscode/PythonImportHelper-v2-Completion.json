[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "const",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "const",
        "description": "const",
        "detail": "const",
        "documentation": {}
    },
    {
        "label": "gTTS",
        "importPath": "gtts",
        "description": "gtts",
        "isExtraImport": true,
        "detail": "gtts",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "profanity",
        "importPath": "better_profanity",
        "description": "better_profanity",
        "isExtraImport": true,
        "detail": "better_profanity",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "PyPexels",
        "importPath": "pypexels",
        "description": "pypexels",
        "isExtraImport": true,
        "detail": "pypexels",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "nltk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nltk",
        "description": "nltk",
        "detail": "nltk",
        "documentation": {}
    },
    {
        "label": "ClipMaker",
        "kind": 6,
        "importPath": "src.clipMaker",
        "description": "src.clipMaker",
        "peekOfCode": "class ClipMaker:\n    def __call__(self, framerate, number):\n        os.system(f\"{const.FFMPEG_PATH} -r 5 -framerate {framerate} -s 1920x1080 -i {const.ASSETS_PATH}/pictures/comment{number}.png -i {const.ASSETS_PATH}/audio/tts{number}.mp3 -pix_fmt yuv420p -vcodec libx264 -acodec copy -y {const.ASSETS_PATH}/clips/clip{number}.mp4\")",
        "detail": "src.clipMaker",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "src.comment",
        "description": "src.comment",
        "peekOfCode": "class Comment:\n    def __init__(self, text, level, upvotes, number):\n        self.text = text\n        self.level = level\n        self.upvotes = upvotes\n        self.number = number\n    def print(self):\n        if DEBUG and self.text is not None:\n            print(\"\\n[#START COMMENT\")\n            print(\"Level = \" + str(self.level))",
        "detail": "src.comment",
        "documentation": {}
    },
    {
        "label": "ROOT_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "ROOT_PATH = Path(__file__).resolve().parent.parent\nSRC_PATH = ROOT_PATH / 'src'\nFFMPEG_PATH = ROOT_PATH / \"venv\" / \\\n    \"Lib\" / \"site-packages\" / \"ffmpeg\" / \"bin\" / \"ffmpeg.exe\"\nFFPROBE_PATH = ROOT_PATH / \"venv\" / \\\n    \"Lib\" / \"site-packages\" / \"ffmpeg\" / \"bin\" / \"ffprobe.exe\"\nASSETS_PATH = ROOT_PATH / \"assets\"\nTEMP_PATH = SRC_PATH / 'temp'\nSTOCK_VIDEO_PATH = TEMP_PATH / 'stock_video'\nPOST_VIDEO_PATH = TEMP_PATH / 'post_video'",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "SRC_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "SRC_PATH = ROOT_PATH / 'src'\nFFMPEG_PATH = ROOT_PATH / \"venv\" / \\\n    \"Lib\" / \"site-packages\" / \"ffmpeg\" / \"bin\" / \"ffmpeg.exe\"\nFFPROBE_PATH = ROOT_PATH / \"venv\" / \\\n    \"Lib\" / \"site-packages\" / \"ffmpeg\" / \"bin\" / \"ffprobe.exe\"\nASSETS_PATH = ROOT_PATH / \"assets\"\nTEMP_PATH = SRC_PATH / 'temp'\nSTOCK_VIDEO_PATH = TEMP_PATH / 'stock_video'\nPOST_VIDEO_PATH = TEMP_PATH / 'post_video'\nCOMMENTS_AUDIO_PATH = TEMP_PATH / 'comments_audio'",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "FFMPEG_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "FFMPEG_PATH = ROOT_PATH / \"venv\" / \\\n    \"Lib\" / \"site-packages\" / \"ffmpeg\" / \"bin\" / \"ffmpeg.exe\"\nFFPROBE_PATH = ROOT_PATH / \"venv\" / \\\n    \"Lib\" / \"site-packages\" / \"ffmpeg\" / \"bin\" / \"ffprobe.exe\"\nASSETS_PATH = ROOT_PATH / \"assets\"\nTEMP_PATH = SRC_PATH / 'temp'\nSTOCK_VIDEO_PATH = TEMP_PATH / 'stock_video'\nPOST_VIDEO_PATH = TEMP_PATH / 'post_video'\nCOMMENTS_AUDIO_PATH = TEMP_PATH / 'comments_audio'\nPOST_AUDIO_PATH = TEMP_PATH / 'post_audio'",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "FFPROBE_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "FFPROBE_PATH = ROOT_PATH / \"venv\" / \\\n    \"Lib\" / \"site-packages\" / \"ffmpeg\" / \"bin\" / \"ffprobe.exe\"\nASSETS_PATH = ROOT_PATH / \"assets\"\nTEMP_PATH = SRC_PATH / 'temp'\nSTOCK_VIDEO_PATH = TEMP_PATH / 'stock_video'\nPOST_VIDEO_PATH = TEMP_PATH / 'post_video'\nCOMMENTS_AUDIO_PATH = TEMP_PATH / 'comments_audio'\nPOST_AUDIO_PATH = TEMP_PATH / 'post_audio'\nMIN_NUMBER_UPVOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 20",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "ASSETS_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "ASSETS_PATH = ROOT_PATH / \"assets\"\nTEMP_PATH = SRC_PATH / 'temp'\nSTOCK_VIDEO_PATH = TEMP_PATH / 'stock_video'\nPOST_VIDEO_PATH = TEMP_PATH / 'post_video'\nCOMMENTS_AUDIO_PATH = TEMP_PATH / 'comments_audio'\nPOST_AUDIO_PATH = TEMP_PATH / 'post_audio'\nMIN_NUMBER_UPVOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 20\nMAX_PARSED_COMMENTS = 20\nTARGET_LEVELS = [1]",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "TEMP_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "TEMP_PATH = SRC_PATH / 'temp'\nSTOCK_VIDEO_PATH = TEMP_PATH / 'stock_video'\nPOST_VIDEO_PATH = TEMP_PATH / 'post_video'\nCOMMENTS_AUDIO_PATH = TEMP_PATH / 'comments_audio'\nPOST_AUDIO_PATH = TEMP_PATH / 'post_audio'\nMIN_NUMBER_UPVOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 20\nMAX_PARSED_COMMENTS = 20\nTARGET_LEVELS = [1]\nMAX_CHAR_COUNT_QUESTION = 300",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "STOCK_VIDEO_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "STOCK_VIDEO_PATH = TEMP_PATH / 'stock_video'\nPOST_VIDEO_PATH = TEMP_PATH / 'post_video'\nCOMMENTS_AUDIO_PATH = TEMP_PATH / 'comments_audio'\nPOST_AUDIO_PATH = TEMP_PATH / 'post_audio'\nMIN_NUMBER_UPVOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 20\nMAX_PARSED_COMMENTS = 20\nTARGET_LEVELS = [1]\nMAX_CHAR_COUNT_QUESTION = 300\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "POST_VIDEO_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "POST_VIDEO_PATH = TEMP_PATH / 'post_video'\nCOMMENTS_AUDIO_PATH = TEMP_PATH / 'comments_audio'\nPOST_AUDIO_PATH = TEMP_PATH / 'post_audio'\nMIN_NUMBER_UPVOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 20\nMAX_PARSED_COMMENTS = 20\nTARGET_LEVELS = [1]\nMAX_CHAR_COUNT_QUESTION = 300\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "COMMENTS_AUDIO_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "COMMENTS_AUDIO_PATH = TEMP_PATH / 'comments_audio'\nPOST_AUDIO_PATH = TEMP_PATH / 'post_audio'\nMIN_NUMBER_UPVOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 20\nMAX_PARSED_COMMENTS = 20\nTARGET_LEVELS = [1]\nMAX_CHAR_COUNT_QUESTION = 300\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "POST_AUDIO_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "POST_AUDIO_PATH = TEMP_PATH / 'post_audio'\nMIN_NUMBER_UPVOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 20\nMAX_PARSED_COMMENTS = 20\nTARGET_LEVELS = [1]\nMAX_CHAR_COUNT_QUESTION = 300\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "MIN_NUMBER_UPVOTES_COMMENT_PERCENTAGE",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "MIN_NUMBER_UPVOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 20\nMAX_PARSED_COMMENTS = 20\nTARGET_LEVELS = [1]\nMAX_CHAR_COUNT_QUESTION = 300\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "MAX_COMMENTS",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "MAX_COMMENTS = 20\nMAX_PARSED_COMMENTS = 20\nTARGET_LEVELS = [1]\nMAX_CHAR_COUNT_QUESTION = 300\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "MAX_PARSED_COMMENTS",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "MAX_PARSED_COMMENTS = 20\nTARGET_LEVELS = [1]\nMAX_CHAR_COUNT_QUESTION = 300\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "TARGET_LEVELS",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "TARGET_LEVELS = [1]\nMAX_CHAR_COUNT_QUESTION = 300\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "MAX_CHAR_COUNT_QUESTION",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "MAX_CHAR_COUNT_QUESTION = 300\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "DEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "scraper",
        "kind": 6,
        "importPath": "src.scraper",
        "description": "src.scraper",
        "peekOfCode": "class scraper(object):\n    def __init__(self, post_url):\n        self.post_url = post_url\n        self.start_browser()\n    def start_browser(self) -> None:\n        chrome_options = webdriver.ChromeOptions()\n        chrome_options.add_argument(\"--start-maximized\")\n        chrome_options.add_argument(\"--incognito\")\n        chrome_options.add_argument('--headless')\n        chrome_options.add_argument('--log-level=3')",
        "detail": "src.scraper",
        "documentation": {}
    },
    {
        "label": "clear_directory",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def clear_directory(directory) -> None:\n    if os.path.exists(directory):\n        shutil.rmtree(directory)\n    os.mkdir(directory)\ndef to_number(formatted_int) -> int:\n    if formatted_int.endswith('k'):\n        formatted_int = float(formatted_int.replace('k', ''))*1000\n    return int(formatted_int)",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "to_number",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def to_number(formatted_int) -> int:\n    if formatted_int.endswith('k'):\n        formatted_int = float(formatted_int.replace('k', ''))*1000\n    return int(formatted_int)",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "VideoMaker",
        "kind": 6,
        "importPath": "src.video_maker",
        "description": "src.video_maker",
        "peekOfCode": "class VideoMaker(object):\n    def __init__(self):\n        load_dotenv()\n        self.py_pexel = PyPexels(api_key=os.getenv('PEXEL_API_KEY'))\n    def generate_video(self) -> None:\n        reddit_post_url = \"https://www.reddit.com/r/AskReddit/comments/qemor9/if_brands_were_brutally_honest_what_brand_would\"\n        def scrape_page():\n            self.scraper = scraper(reddit_post_url)\n            self.scraper.scrape_post()\n        def generate_comments():",
        "detail": "src.video_maker",
        "documentation": {}
    }
]