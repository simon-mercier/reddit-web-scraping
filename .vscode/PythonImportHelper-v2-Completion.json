[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "const",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "const",
        "description": "const",
        "detail": "const",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "const",
        "description": "const",
        "isExtraImport": true,
        "detail": "const",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "const",
        "description": "const",
        "isExtraImport": true,
        "detail": "const",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "gTTS",
        "importPath": "gtts",
        "description": "gtts",
        "isExtraImport": true,
        "detail": "gtts",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "MP3",
        "importPath": "mutagen.mp3",
        "description": "mutagen.mp3",
        "isExtraImport": true,
        "detail": "mutagen.mp3",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "clipMaker",
        "description": "clipMaker",
        "isExtraImport": true,
        "detail": "clipMaker",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Scrapper",
        "importPath": "scrapper",
        "description": "scrapper",
        "isExtraImport": true,
        "detail": "scrapper",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Reddit.comment",
        "description": "Reddit.comment",
        "isExtraImport": true,
        "detail": "Reddit.comment",
        "documentation": {}
    },
    {
        "label": "StaleElementReferenceException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "post",
        "description": "post",
        "isExtraImport": true,
        "detail": "post",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "comment",
        "description": "comment",
        "isExtraImport": true,
        "detail": "comment",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ClipMaker",
        "kind": 6,
        "importPath": "src.clipMaker",
        "description": "src.clipMaker",
        "peekOfCode": "class ClipMaker:\n    def __call__(self, framerate, number):\n        os.system(f\"{const.FFMPEG_PATH} -r 5 -framerate {framerate} -s 1920x1080 -i {const.ASSETS_PATH}/pictures/comment{number}.png -i {const.ASSETS_PATH}/audio/tts{number}.mp3 -pix_fmt yuv420p -vcodec libx264 -acodec copy -y {const.ASSETS_PATH}/clips/clip{number}.mp4\")\n#FIN CLASSE",
        "detail": "src.clipMaker",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "src.comment",
        "description": "src.comment",
        "peekOfCode": "class Comment:\n    def __init__(self, text, level):\n        self.text = text\n        self.level = level\n    def print(self):\n        if DEBUG and self.text is not None:\n            print(\"\\n[#START COMMENT\")\n            print(\"Level = \" + str(self.level))\n            print(\"Text = \" + self.text)\n            print(\"Word Count = \" + str(self.wordCount))",
        "detail": "src.comment",
        "documentation": {}
    },
    {
        "label": "ROOT_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "ROOT_PATH = Path(__file__).resolve().parent.parent\nFFMPEG_PATH = f\"{ROOT_PATH}/venv/site-packages/imageio_ffmpeg/binaries/ffmpeg-win32-v4.1.exe\"\nASSETS_PATH = f\"{ROOT_PATH}/assets\"\nMIN_NUMBER_VOTES_QUESTION = 10000\nMIN_NUMBER_VOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 5\nMAX_PARSED_COMMENTS = 20\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "FFMPEG_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "FFMPEG_PATH = f\"{ROOT_PATH}/venv/site-packages/imageio_ffmpeg/binaries/ffmpeg-win32-v4.1.exe\"\nASSETS_PATH = f\"{ROOT_PATH}/assets\"\nMIN_NUMBER_VOTES_QUESTION = 10000\nMIN_NUMBER_VOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 5\nMAX_PARSED_COMMENTS = 20\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "ASSETS_PATH",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "ASSETS_PATH = f\"{ROOT_PATH}/assets\"\nMIN_NUMBER_VOTES_QUESTION = 10000\nMIN_NUMBER_VOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 5\nMAX_PARSED_COMMENTS = 20\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "MIN_NUMBER_VOTES_QUESTION",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "MIN_NUMBER_VOTES_QUESTION = 10000\nMIN_NUMBER_VOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 5\nMAX_PARSED_COMMENTS = 20\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "MIN_NUMBER_VOTES_COMMENT_PERCENTAGE",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "MIN_NUMBER_VOTES_COMMENT_PERCENTAGE = .1\nMAX_COMMENTS = 5\nMAX_PARSED_COMMENTS = 20\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "MAX_COMMENTS",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "MAX_COMMENTS = 5\nMAX_PARSED_COMMENTS = 20\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "MAX_PARSED_COMMENTS",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "MAX_PARSED_COMMENTS = 20\nDEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "src.const",
        "description": "src.const",
        "peekOfCode": "DEBUG = True",
        "detail": "src.const",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "src.post",
        "description": "src.post",
        "peekOfCode": "class Post(object):\n    def __init__(self, title, author, url):\n        self.title = title\n        self.author = author\n        self.url = url",
        "detail": "src.post",
        "documentation": {}
    },
    {
        "label": "ScrapePost",
        "kind": 6,
        "importPath": "src.scapePost",
        "description": "src.scapePost",
        "peekOfCode": "class ScrapePost:\n    browser = None\n    question = None\n    post = None\n    comments = []\n    #Constructor\n    #@required browser\n    def __init__(self, browser=None, question=None):\n        self.question = question\n        self.browser = browser",
        "detail": "src.scapePost",
        "documentation": {}
    },
    {
        "label": "Scrapper",
        "kind": 6,
        "importPath": "src.scrapper",
        "description": "src.scrapper",
        "peekOfCode": "class Scrapper(object):\n    def __init__(self, post_url):\n        self.post_url = post_url\n        self.start_browser()\n    def start_browser(self) -> None:\n        chrome_options = webdriver.ChromeOptions()\n        chrome_options.add_argument(\"--start-maximized\")\n        chrome_options.add_argument(\"--incognito\")\n        self.browser = webdriver.Chrome(\n            executable_path=CM().install(), options=chrome_options)",
        "detail": "src.scrapper",
        "documentation": {}
    },
    {
        "label": "removeFolders",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def removeFolders(path):\n    for root, dirs, files in os.walk(path):\n        for f in files:\n            os.unlink(os.path.join(root, f))\n        for d in dirs:\n            shutil.rmtree(os.path.join(root, d))\ndef roundIntToEven(int):\n    print('ini = ' + str(int) + 'final = ' + str(2 * math.floor(int / 2)))\n    return 2 * math.floor(int / 2)",
        "detail": "src.utils",
        "documentation": {}
    },
    {
        "label": "roundIntToEven",
        "kind": 2,
        "importPath": "src.utils",
        "description": "src.utils",
        "peekOfCode": "def roundIntToEven(int):\n    print('ini = ' + str(int) + 'final = ' + str(2 * math.floor(int / 2)))\n    return 2 * math.floor(int / 2)",
        "detail": "src.utils",
        "documentation": {}
    }
]